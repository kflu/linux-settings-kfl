#!/bin/sh
# shell-neutral rc settings

DIR="$(cd "$(dirname "$0")"; pwd)"

[ `uname` = "Linux" ] && alias ls="ls --color=auto"
alias ll="ls -l"
alias lla="ls -la"
alias ccc="xclip -sel clipboard"
alias vvv="xclip -sel clipboard -o"

alias vman="MANPAGER='vim +MANPAGER -c \"set nomodifiable readonly\" -' man"
alias gvman="MANPAGER='gvim +MANPAGER -c \"set nomodifiable readonly\" -' man"

export PATH="$HOME/.local/bin":"$HOME/.local/usr/bin":"$HOME/.local/share/bin":"$PATH"
export PATH="$HOME/.dotnet/tools":"$PATH"
export PATH=.:"$PATH"

# EDITOR is used by tmux to infer if vi-mode should be used
# So try to set it
if command -v vim >/dev/null; then
    export EDITOR=`command -v vim`
elif command -v vi >/dev/null; then
    export EDITOR=`command -v vi`
fi


# readline to treat those as words:
# https://stackoverflow.com/a/11200998/695964
export WORDCHARS='"*?_-.[]~=&;!#$%^(){}<>|'"'"

godo() {
    eval "nohup $@ > /dev/null 2>&1 &"
}

set_dpi() {
    dpi=$1
    printf "Setting DPI to $dpi in ~/.Xresources.dpi\n"
    echo "Xft.dpi:$dpi" > ~/.Xresources.dpi
    printf "Reloading ~/.Xresources\n"
    xrdb -cpp `which cpp` ~/.Xresources
    printf "done\n"
}


RES_MBP=1680x1050
RES_ACER_HOME=2560x1440

clip_dump() {
    printf "\n======== clipboard =========\n"
    xclip -o -sel clipboard

    printf "\n======== primary =========\n"
    xclip -o -sel primary
    printf "\n"

    printf "\n======== secondary =========\n"
    xclip -o -sel secondary
    printf "\n"

    printf "\n======== buffer-cut =========\n"
    xclip -o -sel buffer-cut
    printf "\n"
}

# Fuzzy search in bookmarks
bm() {
    type="$1";shift
    case "$type" in
        d) target="$HOME/.bookmarks/dirs";;
        f) target="$HOME/.bookmarks/files";;
        *) target="$HOME/.bookmarks";;
    esac
    find -L "$target" -type f ! -name '*~' | while read -r fn; do
        cat $fn | while read -r ln; do
            eval echo $ln
        done
    done | uniq | fzf
}

cdbm() {
    cd `bm d`
}


_fzf_complete_fc() {
    _fzf_complete --tac --cycle --prompt='fc> ' -- "$@" < <(fc -l -1000)
}

_fzf_complete_fc_post() {
    awk '{print $1}'
}

[ -n "$BASH" ] && complete -F _fzf_complete_fc -o default -o bashdefault fc

logout_mac() {
    launchctl bootout gui/$( id -u $(whoami) )
}


mkpost() (
    USAGE="$(cat <<'EOF'
mkpost [-t title] [-f]
    -t: use `title` in the directory/file name
    -f: do not create directory, just a file
EOF
)"
    while getopts 't:hf' opt; do
        case "$opt" in
            t)
                title="$OPTARG";;
            f)
                create_file=1;;
            h|*)
                echo "$USAGE" >&2; exit 0;;
        esac
    done
    shift $((OPTIND-1))

    if test -z "$title"; then
        printf "Title: "
        read -r title
    fi

    if test -z "$title"; then
        echo "Must give a title" >&2
        exit 1
    fi

    ts="$(date +"%Y-%m-%d")"
    name="$ts-$title"

    if test -z "$create_file"; then
        mkdir -p "$name"
        fn="$name/post.md"
    else
        fn="$name.md"
    fi

    test -e "$fn" || {
        echo "Creating file: $fn"
        touch "$fn"
    }

    echo "Editing file: $fn"
    "${EDITOR:-vim}" "$fn"
)

# Recipes
{
    . "$DIR"/lib/recipe
    recipe_source_dir
} >/dev/null 2>&1

# vim========== set ft=sh
